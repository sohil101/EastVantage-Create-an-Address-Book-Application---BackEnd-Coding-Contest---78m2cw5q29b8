const Address = require('../models/Address.js');

// Create a new address
/*
You have to implement a controller function that creates a new address and saves it to MongoDB. 
The input data for the controller function should be in the req.body object and should include the following properties:
name: a string representing the name of the address (required)
address: a string representing the address (required)
latitude: a number representing the latitude of the address location (required)
longitude: a number representing the longitude of the address location (required)
The controller function should validate the input data to ensure that all required fields are present. If any required fields are missing, the controller function should return a 400 status code with a JSON response that includes an error message.

If all required fields are present, the controller function should create a new Address document with the input data and save it to MongoDB. The location property of the Address document should be a Point object with type and coordinates properties representing the latitude and longitude of the address location, respectively.

After the new Address document is saved, the controller function should return a 201 status code with a JSON response that includes a success message and the new address data, including the _id field generated by MongoDB.

Here's an example input and output for the controller function:

Input:
{
  "name": "Google HQ",
  "address": "1600 Amphitheatre Parkway, Mountain View, CA 94043",
  "latitude": 37.422,
  "longitude": -122.084
}
Output:

{
  "message": "Address created successfully",
  "address": {
    "_id": "6091e203aa8c8e0015a7869b",
    "name": "Google HQ",
    "address": "1600 Amphitheatre Parkway, Mountain View, CA 94043",
    "location": {
      "type": "Point",
      "coordinates": [
        -122.084,
        37.422
      ]
    },
    "createdAt": "2023-04-10T10:00:03.740Z",
    "updatedAt": "2023-04-10T10:00:03.740Z",
    "__v": 0
  }
}
*/
createAddress = async (req, res, next) => {
  // Write your code here
};

// Update an existing address
/*
Instructions:
You have to implement a controller function called updateAddress that takes in req, res, and next as arguments. The function should first destructure name, address, latitude, longitude, and id from req.body and req.params, respectively. Then it should validate that all of these fields exist in the request body, and if not, it should return a 400 status code with a message of "Please provide all required information".

If all fields exist, the function should update the address in the MongoDB database with the provided id using Address.findByIdAndUpdate() method. The new data should be passed as an object with name, address, and location properties, where location is an object with type property set to "Point" and coordinates property set to an array with longitude and latitude. The { new: true } option should be passed to ensure that the updated document is returned.

If the update is successful, the function should return a JSON response with a status code of 200 and a message of "Address updated successfully" along with the updated address object.

Sample input:
{
  "name": "John Doe",
  "address": "123 Main St",
  "latitude": 42.3601,
  "longitude": -71.0589
}
req.params.id: "610fad0c6d9621d2b8e220e7"

Sample output:
{
  "message": "Address updated successfully",
  "address": {
    "_id": "610fad0c6d9621d2b8e220e7",
    "name": "John Doe",
    "address": "123 Main St",
    "location": {
      "type": "Point",
      "coordinates": [
        -71.0589,
        42.3601
      ]
    },
    "createdAt": "2021-08-08T00:00:00.000Z",
    "updatedAt": "2021-08-08T12:00:00.000Z"
  }
}
*/
updateAddress = async (req, res, next) => {
  // Write your code here
};

// Delete an existing address
/*
Instructions:
You have to implement a controller function deleteAddress that takes in a request and a response object as parameters. The function should delete the address with the given id from the MongoDB database and send a JSON response with a success message. If an error occurs during the deletion process, the function should log the error to the console and pass it to the next function as an argument.

Sample Input:
req.params.id = "6153646b7d6b1f6fb3e3f63c"

Sample Output:
{
  "message": "Address deleted successfully"
}
*/
deleteAddress = async (req, res, next) => {
  //Write your code here
};

// Get addresses within a given distance and location
/*
You have to implement a controller function getAddressesWithinDistance that accepts a GET request with three query parameters: latitude, longitude, and distance. The function should find all addresses within the given distance from the given location (latitude and longitude) using MongoDB's geospatial query operator $near.

The function should first validate that all three required query parameters are present, otherwise, it should return a 400 Bad Request response with an error message.

Then, the function should use the Address model to query the MongoDB database and find all addresses that are within the given distance from the given location. It should use the find() method with a $near query operator to filter the addresses based on their location. The $near operator requires a $geometry parameter with the location coordinates and a $maxDistance parameter with the maximum distance in meters from the location.

Finally, the function should return a 200 OK response with a JSON object that contains an array of addresses found within the given distance.

Sample input:

GET /addresses?latitude=37.7749&longitude=-122.4194&distance=5000
Sample output:

HTTP/1.1 200 OK
Content-Type: application/json

{
  "addresses": [
    {
      "_id": "61614b7e72b46d91b8ca3261",
      "name": "Golden Gate Park",
      "address": "San Francisco, CA 94122",
      "location": {
        "type": "Point",
        "coordinates": [
          -122.48346710205078,
          37.76925103262643
        ]
      },
      "__v": 0
    },
    {
      "_id": "61614b7e72b46d91b8ca3262",
      "name": "Fisherman's Wharf",
      "address": "San Francisco, CA 94133",
      "location": {
        "type": "Point",
        "coordinates": [
          -122.41870021820068,
          37.80870569780958
        ]
      },
      "__v": 0
    }
  ]
}
*/
getAddressesWithinDistance = async (req, res, next) => {
  //Write your code here
};

module.exports = {createAddress, updateAddress, deleteAddress, getAddressesWithinDistance}